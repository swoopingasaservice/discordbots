# sistersister/utilitybot.py

import discord
from discord.ext import commands
import asyncio  # Make sure to import asyncio

intents = discord.Intents.default()
intents.messages = True
intents.message_content = True  # Enable message content intent

bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    await bot.tree.sync()  # Sync the commands with Discord
    print(f'Logged in as {bot.user}!')

# Create a slash command to set up the ticket creation button
@bot.tree.command(name="setup", description="Sets up the ticket creation button.")
async def setup(interaction: discord.Interaction):
    # Check if the user has the administrator permission
    if interaction.user.guild_permissions.administrator:
        button = discord.ui.Button(label="Create Ticket", style=discord.ButtonStyle.primary)

        async def button_callback(interaction: discord.Interaction):
            # Get the category of the channel where the command was run
            category = interaction.channel.category
            guild = interaction.guild
            
            # Define permissions for the ticket channel
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=False),  # Deny everyone
                interaction.user: discord.PermissionOverwrite(read_messages=True),  # Allow the user
            }
            
            # Find the Admin role
            admin_role = discord.utils.get(guild.roles, name="Admin")
            if admin_role:
                overwrites[admin_role] = discord.PermissionOverwrite(read_messages=True)  # Allow Admins
            
            # Create a unique ticket channel name using the server ID
            ticket_channel_name = f'ticket-{interaction.user.name}-{guild.id}'
            
            # Check if the category is None and handle it
            if category is None:
                # Create the ticket channel without a category
                ticket_channel = await guild.create_text_channel(ticket_channel_name, overwrites=overwrites)
            else:
                # Create the ticket channel in the same category with the defined permissions
                ticket_channel = await guild.create_text_channel(ticket_channel_name, category=category, overwrites=overwrites)

            await ticket_channel.send(f'This is your support ticket, {interaction.user.mention}. Please describe your issue.')
            await interaction.response.send_message(f'Ticket created. Please look for a new text channel created with your username tagged: {ticket_channel.mention}', ephemeral=True)

        button.callback = button_callback
        view = discord.ui.View()
        view.add_item(button)

        await interaction.response.send_message("Click the button below to create a support ticket:", view=view)
    else:
        await interaction.response.send_message("You do not have permission to use this command.", ephemeral=True)

# Create a slash command for closing a support ticket
@bot.tree.command(name="close", description="Closes the support ticket.")
async def close(interaction: discord.Interaction):
    if interaction.channel.name.startswith('ticket-'):
        await interaction.channel.send('This ticket will be closed in 5 seconds.')
        await asyncio.sleep(5)
        await interaction.channel.delete()
        await interaction.response.send_message('Ticket closed.', ephemeral=True)
    else:
        await interaction.response.send_message('This command can only be used in a ticket channel.', ephemeral=True)


# Add your bot token here
bot.run('<bot token here>')
