import discord
from discord.ext import commands
import asyncio

# Explicitly define the channel ID where the button will be created
TICKET_CHANNEL_ID = 1300179329891962967  # Replace with your actual channel ID

intents = discord.Intents.default()
intents.messages = True
intents.message_content = True  # Enable message content intent

bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    await bot.tree.sync()  # Sync the commands with Discord
    print(f'Logged in as {bot.user}!')

    # Automatically create the button in the specified channel on startup
    channel = bot.get_channel(TICKET_CHANNEL_ID)
    if channel:
        button = discord.ui.Button(label="Create Ticket", style=discord.ButtonStyle.primary)

        async def button_callback(interaction: discord.Interaction):
            guild = interaction.guild
            
            # Check if the user already has an open ticket
            existing_ticket = discord.utils.get(guild.text_channels, name=f'ticket-{interaction.user.name}-{guild.id}')
            if existing_ticket:
                await interaction.response.send_message("You already have an open ticket. Please close it before creating a new one.", ephemeral=True)
                return
            
            # Define permissions for the ticket channel
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=False),  # Deny everyone
                interaction.user: discord.PermissionOverwrite(read_messages=True),  # Allow the user
            }
            
            # Find the Admin role
            admin_role = discord.utils.get(guild.roles, name="Admin")
            if admin_role:
                overwrites[admin_role] = discord.PermissionOverwrite(read_messages=True)  # Allow Admins
            
            # Create a unique ticket channel name using the server ID
            ticket_channel_name = f'ticket-{interaction.user.name}-{guild.id}'
            
            # Get the category of the channel where the button was created
            category = channel.category
            
            # Create the ticket channel in the same category
            ticket_channel = await guild.create_text_channel(ticket_channel_name, category=category, overwrites=overwrites)

            # Create an embed for the ticket message
            embed = discord.Embed(
                title="New Support Ticket",
                description=f'This is your support ticket, {interaction.user.mention}. Please describe your issue.',
                color=discord.Color.blue()
            )
            embed.set_footer(text="React with ❌ to close this ticket.")

            ticket_message = await ticket_channel.send(embed=embed)

            # Add a reaction for closing the ticket
            await ticket_message.add_reaction("❌")

            await interaction.response.send_message(f'Ticket created: {ticket_channel.mention}', ephemeral=True)

            # Define a check for the reaction
            def check(reaction, user):
                return user == interaction.user and str(reaction.emoji) == "❌" and reaction.message.id == ticket_message.id

            # Wait for the user to react to close the ticket
            try:
                await bot.wait_for('reaction_add', timeout=86400.0, check=check)  # 24 hours timeout
                await ticket_channel.send('This ticket will be closed in 5 seconds.')
                await asyncio.sleep(5)
                await ticket_channel.delete()
            except asyncio.TimeoutError:
                await ticket_channel.send('Ticket closed due to inactivity.')

        button.callback = button_callback
        view = discord.ui.View()
        view.add_item(button)

        # Send the button message to the channel
        await channel.send("Click the button below to create a support ticket:", view=view)

@bot.tree.command(name="setup", description="Sets up the ticket creation button.")
async def setup(interaction: discord.Interaction):
    # Check if the user has the administrator permission
    if interaction.user.guild_permissions.administrator:
        channel = bot.get_channel(TICKET_CHANNEL_ID)
        if channel:
            button = discord.ui.Button(label="Create Ticket", style=discord.ButtonStyle.primary)

            async def button_callback(interaction: discord.Interaction):
                guild = interaction.guild
                
                # Check if the user already has an open ticket
                existing_ticket = discord.utils.get(guild.text_channels, name=f'ticket-{interaction.user.name}-{guild.id}')
                if existing_ticket:
                    await interaction.response.send_message("You already have an open ticket. Please close it before creating a new one.", ephemeral=True)
                    return
                
                # Define permissions for the ticket channel
                overwrites = {
                    guild.default_role: discord.PermissionOverwrite(read_messages=False),  # Deny everyone
                    interaction.user: discord.PermissionOverwrite(read_messages=True),  # Allow the user
                }
                
                # Find the Admin role
                admin_role = discord.utils.get(guild.roles, name="Admin")
                if admin_role:
                    overwrites[admin_role] = discord.PermissionOverwrite(read_messages=True)  # Allow Admins
                
                # Create a unique ticket channel name using the server ID
                ticket_channel_name = f'ticket-{interaction.user.name}-{guild.id}'
                
                # Get the category of the channel where the button was created
                category = channel.category
                
                # Create the ticket channel in the same category
                ticket_channel = await guild.create_text_channel(ticket_channel_name, category=category, overwrites=overwrites)

                # Create an embed for the ticket message
                embed = discord.Embed(
                    title="New Support Ticket",
                    description=f'This is your support ticket, {interaction.user.mention}. Please describe your issue.',
                    color=discord.Color.blue()
                )
                embed.set_footer(text="React with ❌ to close this ticket.")

                ticket_message = await ticket_channel.send(embed=embed)

                # Add a reaction for closing the ticket
                await ticket_message.add_reaction("❌")

                await interaction.response.send_message(f'Ticket created: {ticket_channel.mention}', ephemeral=True)

                # Define a check for the reaction
                def check(reaction, user):
                    return user == interaction.user and str(reaction.emoji) == "❌" and reaction.message.id == ticket_message.id

                # Wait for the user to react to close the ticket
                try:
                    await bot.wait_for('reaction_add', timeout=86400.0, check=check)  # 24 hours timeout
                    await ticket_channel.send('This ticket will be closed in 5 seconds.')
                    await asyncio.sleep(5)
                    await ticket_channel.delete()
                except asyncio.TimeoutError:
                    await ticket_channel.send('Ticket closed due to inactivity.')

            button.callback = button_callback
            view = discord.ui.View()
            view.add_item(button)

            # Send the button message to the channel
            await channel.send("Click the button below to create a support ticket:", view=view)
        else:
            await interaction.response.send_message("The specified channel does not exist.", ephemeral=True)
    else:
        await interaction.response.send_message("You do not have permission to use this command.", ephemeral=True)

# Create a slash command for closing a support ticket
@bot.tree.command(name="close", description="Closes the support ticket.")
async def close(interaction: discord.Interaction):
    if interaction.channel.name.startswith('ticket-'):
        await interaction.channel.send('This ticket will be closed in 5 seconds.')
        await asyncio.sleep(5)
        await interaction.channel.delete()
        await interaction.response.send_message('Ticket closed.', ephemeral=True)
    else:
        await interaction.response.send_message('This command can only be used in a ticket channel.', ephemeral=True)





# Add your bot token here
bot.run('<bot token here>')
